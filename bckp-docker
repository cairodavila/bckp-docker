#!/usr/bin/env zsh
#
# bckp-docker: bring down a docker-compose project, back up its volumes
# to an S3‑compatible remote, then bring it back up.
# usage: bckp-docker [-p /path/to/compose-dir]

set -euo pipefail

# ─── load .env ─────────────────────────────────────────────────────
script_dir=$(dirname "$(realpath "$0")")
env_file="$script_dir/.env"
[[ -f $env_file ]] && source "$env_file"

# ─── required config (must be set in .env or env) ──────────────────
REMOTE=${REMOTE:-}
MAIN_BUCKET=${MAIN_BUCKET:-}
RCLONE_CONF=${RCLONE_CONF:-$HOME/.config/rclone}

if [[ -z $REMOTE ]]; then
  echo "error: REMOTE not set in $env_file" >&2; exit 1
fi
if [[ -z $MAIN_BUCKET ]]; then
  echo "error: MAIN_BUCKET not set in $env_file" >&2; exit 1
fi

# ─── styling ───────────────────────────────────────────────────────
BLUE="\033[1;34m"; GREEN="\033[1;32m"
YELLOW="\033[1;33m"; RED="\033[1;31m"; NC="\033[0m"
info()  { echo -e "${BLUE}$*${NC}"; }
ok()    { echo -e "${GREEN}$*${NC}"; }
warn()  { echo -e "${YELLOW}$*${NC}"; }
error() { echo -e "${RED}$*${NC}"; }

# ─── parse -p flag ─────────────────────────────────────────────────
compose_path="."
while getopts "p:" opt; do
  case $opt in
    p) compose_path="$OPTARG" ;;
    *) error "usage: bckp-docker [-p path]"; exit 1;;
  esac
done
shift $((OPTIND-1))

# ─── find compose file & project name ─────────────────────────────
info "finding compose file in '$compose_path'…"
compose_file=$(find "$compose_path" -maxdepth 1 \
  \( -name docker-compose.yml -o -name docker-compose.yaml \) \
  -print -quit)

[[ -z $compose_file ]] && { error "no compose file in '$compose_path'"; exit 1; }
info "found compose file: $compose_file"

compose_dir=$(dirname "$compose_file")
pushd "$compose_dir" >/dev/null
project_name=$(basename "$PWD")
popd >/dev/null
info "using project name: $project_name"

# ─── list volumes ──────────────────────────────────────────────────
info "identifying volumes…"
pushd "$compose_dir" >/dev/null
volume_list=$(docker compose config --volumes 2>/dev/null)
rc=$?
popd >/dev/null
(( rc != 0 )) && { error "docker compose config --volumes failed"; exit 1; }
[[ -z $volume_list ]] && { warn "no volumes found; nothing to back up"; exit 0; }

# split into array
volumes=(${(f)volume_list})
info "found volumes: ${volumes[*]}"

# ─── ensure bucket exists ─────────────────────────────────────────
info "ensuring bucket '$MAIN_BUCKET' on '$REMOTE'…"
rclone mkdir "${REMOTE}:${MAIN_BUCKET}" >/dev/null 2>&1
(( $? == 0 )) || { error "cannot create/verify bucket"; exit 1; }
ok "bucket ready"

# ─── bring down/up trap ────────────────────────────────────────────
trap 'info "bringing up compose…"; docker compose -f "'"$compose_file"'" up -d >/dev/null' EXIT
info "bringing down compose…"
docker compose -f "$compose_file" down

# ─── invoke helper container ──────────────────────────────────────
helper="$script_dir/backup-container.sh"
[[ -x $helper ]] || { error "helper missing/exec bit not set"; exit 1; }

cmd=(
  docker run --rm -it
    --entrypoint /bin/sh
    -v "$RCLONE_CONF:/config/rclone:ro"
    -v "$helper:/app/backup-container.sh:ro"
    -e REMOTE
    -e MAIN_BUCKET
    -e PROJECT_NAME="$project_name"
    -e RCLONE_OPTS
    -e SIZE_ONLY
    -e CHECKSUM
    -e UPDATE
    -e USE_SERVER_MODTIME
    -e FAST_LIST
    -e NO_TRAVERSE
    -e S3_NO_HEAD
    -e S3_UPLOAD_CUTOFF
    -e S3_CHUNK_SIZE
    -e S3_UPLOAD_CONCURRENCY
    -e ENABLE_VERSIONING
    -e ENABLE_ACL
    -e DEBUG
    --network host
  rclone/rclone -c "/app/backup-container.sh"
)

for v in "${volumes[@]}"; do
  cmd+=( -v "$v:/data/$v:ro" )
done

info "running backup container…"
"${cmd[@]}"
exit $?